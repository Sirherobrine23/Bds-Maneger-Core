name: Publish release module release
on:
  release:
    types:
      - created

jobs:
  publishreleasemodule:
    runs-on: ubuntu-latest
    name: Publish npm module (release)
    strategy:
      matrix:
        npm_registry:
          - "Github"
          - "NPM"
    steps:
      - uses: actions/checkout@v2.4.0
        with:
          submodules: true

      - name: Setup Node.js (NPM Packages)
        if: matrix.npm_registry == 'NPM'
        uses: actions/setup-node@v3.1.0
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org/

      - name: Setup Node.js (Github Packages)
        if: matrix.npm_registry == 'Github'
        uses: actions/setup-node@v3.1.0
        with:
          node-version: 16.x
          registry-url: https://npm.pkg.github.com/

      - name: Remove Dev Version
        shell: node {0}
        run: |
          const child_process = require("child_process");
          const fs = require("fs");
          const path = require("path");
          const cli_color = require("cli-color");
          (async function() {
            global.fetch = (await import("node-fetch")).default;
            fetch("https://registry.npmjs.org/@the-bds-maneger/core").then(res => res.json()).then(data => {
              data.versions = Object.getOwnPropertyNames(data.versions).filter(version => /[0-9]+\.[0-9][0-9][0-9]/.test(version) && version !== data["dist-tags"].dev && version !== data["dist-tags"].latest)
              fs.writeFileSync(path.resolve(__dirname, "Releases.json"), JSON.stringify(data, null, 2));
              const Package = require(process.cwd()+"/package.json");
              data.versions.map(version => {
                const cmd = `npm unpublish ${Package.name}@${version}`;
                console.log(cli_color.yellow(cmd));
                try {
                  child_process.execSync(cmd).toString()
                  console.log(cli_color.green(`Sucess to remove ${Package.name}@${version}`, "\n"));
                  return cmd;
                } catch (e) {
                  console.log(cli_color.red(`Failed to remove package: ${Package.name}@${version}`), "\n");
                  return version;
                }
              });
              fs.writeFileSync(path.resolve(__dirname, "Releases.json"), JSON.stringify(data, null, 2));
            });
          })();

      - name: Install node depencies
        run: npm install -d

      - name: Build typescript to CJS and ESM
        run: npm run build

      - name: Publish Package
        run: |
          set -x
          if [[ "${{ matrix.npm_registry }}" == "Github" ]];then
            echo "Publish to Github Packages"
            export NODE_AUTH_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          else
            echo "Publish to NPM Registry"
            export NODE_AUTH_TOKEN="${{ secrets.NPM_ORG_TOKEN }}"
          fi
          npm publish
