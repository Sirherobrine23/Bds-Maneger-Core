name: "Publish Packages"
on:
  push:
    branches:
      - main
  release:
    types:
      - released
jobs:
  CodeQL:
    name: Analyze
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: "javascript"

    - name: Autobuild
      uses: github/codeql-action/autobuild@v1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version:
          - 15.x
          - 16.x
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Node.JS and NPM
        uses: actions/setup-node@v2.5.0
        with:
          registry-url: https://registry.npmjs.org/
          node-version: ${{ matrix.node_version }}

      - name: Install Node Dependencies
        run: npm ci

      - name: Test
        run: npm test

  npm:
    name: Npm Publish
    runs-on: ubuntu-latest
    needs: [test]
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_ORG_TOKEN }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Node.JS and NPM
        uses: actions/setup-node@v2.5.0
        with:
          node-version: 16.x
          registry-url: https://registry.npmjs.org/

      - name: Edit Version to next release
        if: github.event_name != 'release'
        shell: node {0}
        run: |
          const fs = require("fs");
          const JsonPackage = JSON.parse(fs.readFileSync(process.cwd()+"/package.json", "utf8"));
          const run_ID = "${{ github.run_id }}";
          JsonPackage.version = `${run_ID.slice(0, 2)}.${run_ID.slice(3, 6)}.${run_ID.slice(7, 11)}`;
          fs.writeFileSync(process.cwd()+"/package.json", JSON.stringify(JsonPackage, null, 2));
          console.log("New Version to Package:", JsonPackage.version);

      - name: Install Node Dependencies
        run: npm install -d

      - name: ESM Modules
        run: npm run esm_module

      - name: Remove Dev Version
        if: github.event_name == 'release'
        shell: node {0}
        run: |
          const child_process = require("child_process");
          const fs = require("fs");
          const path = require("path");
          const cli_color = require("cli-color");
          (async function() {
            global.fetch = (await import("node-fetch")).default;
            fetch("https://registry.npmjs.org/@the-bds-maneger/core").then(res => res.json()).then(data => {
              data.versions = Object.getOwnPropertyNames(data.versions).filter(version => /[0-9]+\.[0-9][0-9][0-9]/.test(version) && version !== data["dist-tags"].dev && version !== data["dist-tags"].latest)
              fs.writeFileSync(path.resolve(__dirname, "Releases.json"), JSON.stringify(data, null, 2));
              const Package = require("./package.json");
              data.versions.map(version => {
                const cmd = `npm unpublish ${Package.name}@${version}`;
                console.log(cli_color.yellow(cmd));
                try {
                  child_process.execSync(cmd).toString()
                  console.log(cli_color.green(`Sucess to remove ${Package.name}@${version}`, "\n"));
                  return cmd;
                } catch (e) {
                  console.log(cli_color.red(`Failed to remove package: ${Package.name}@${version}`), "\n");
                  return version;
                }
              });
              fs.writeFileSync(path.resolve(__dirname, "Releases.json"), JSON.stringify(data, null, 2));
            });
          })();

      - name: Publish Package
        run: |
          if [[ "${{ github.event_name }}" == "release" ]];then
            npm publish
          else
            npm publish --tag next
          fi

  docker:
    runs-on: ubuntu-latest
    name: Publish Docker Image
    needs: [test]
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Edit Version to next release
        if: github.event_name != 'release'
        shell: node {0}
        run: |
          const fs = require("fs");
          const JsonPackage = JSON.parse(fs.readFileSync("./package.json", "utf8"));
          const run_ID = "${{ github.run_id }}";
          JsonPackage.version = `${run_ID.slice(0, 2)}.${run_ID.slice(3, 6)}.${run_ID.slice(7, 11)}`;
          fs.writeFileSync("./package.json", JSON.stringify(JsonPackage, null, 2));
          console.log("New Version to Package:", JsonPackage.version);


      - name: Get Version and Set in Env
        shell: node {0}
        run: |
          const { version } = require("./package.json");
          const ActionsCore = require("@actions/core");
          console.log(version);
          ActionsCore.exportVariable("CoreVersion", version);

      - name: Install Node Dependencies
        if: github.event_name != 'release'
        run: npm ci

      - name: Build Bds Maneger Core (Release)
        uses: docker/build-push-action@v2
        if: github.event_name == 'release'
        with:
          push: true
          tags: |
            ghcr.io/the-bds-maneger/core:latest
            ghcr.io/the-bds-maneger/core:${{ env.CoreVersion }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7

      - name: Build Bds Maneger Core (Main)
        uses: docker/build-push-action@v2
        if: github.event_name != 'release'
        with:
          push: true
          tags: ghcr.io/the-bds-maneger/core:nightly
          platforms: linux/amd64,linux/arm64,linux/arm/v7
